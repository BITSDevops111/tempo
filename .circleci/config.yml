version: 2.1

jobs:
  install_dependencies:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: Install NPM dependencies
          command: npm install

  sonarCloud_analysis:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: Install & Run SonarScanner Analysis
          command: |
            export SONAR_SCANNER_VERSION=6.2.1.4610
            export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
            curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
            unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            export PATH=$SONAR_SCANNER_HOME/bin:$PATH
            export SONAR_SCANNER_OPTS="-server"
            ls $SONAR_SCANNER_HOME/bin #check if sonar-scanner binary is present here
            sonar-scanner -Dsonar.organization=circlecicd1 -Dsonar.projectKey=circlecicd1_circlecicd0123 -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
      - run:
          name: Check SonarCloud Quality Gate
          command: |
            curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=circlecicd1_circlecicd0123" > quality_gate.json
            if grep -q '"status":"ERROR"' quality_gate.json; then
              echo "SonarCloud Quality Gate failed."
              exit 1
            else
              echo "SonarCloud Quality Gate passed."
            fi
      - run:
          name: Send SonarCloud results to DefectDojo
          command: |
            python \<<EOF
              import json
              import os
              import requests
              import sys

              def send_sonarcloud_to_defectdojo(project_key, token, defectdojo_api_url, defectdojo_api_key):
                  sonar_host_url = os.environ.get("SONAR_HOST_URL")
                  url = f"{sonar_host_url}/api/issues/search?componentKeys={project_key}&resolved=false"
                  headers = {"Authorization": f"Basic {token}"}
                  response = requests.get(url, headers=headers)
                  response.raise_for_status()
                  issues = response.json().get("issues", [])

                  defectdojo_findings = []
                  for issue in issues:
                      defectdojo_findings.append({
                          "title": f"SonarCloud: {issue.get('message')}",
                          "description": issue.get('message'),
                          "severity": issue.get('severity', 'Info').capitalize(),
                          "file_path": issue.get('component'),
                          "line_number": issue.get('line'),
                          "scanner": "SonarCloud",
                          "active": True,
                          "verified": False,
                          "false_p": False,
                          "duplicate": False,
                          "out_of_scope": False,
                          "cwe": [],
                          "tags": [],
                          "date": issue.get('creationDate')
                      })

                  defectdojo_payload = defectdojo_findings
                  if defectdojo_payload:
                    curl_command = f'curl -X POST "{defectdojo_api_url}/api/v2/findings/" -H "Authorization: Token {defectdojo_api_key}" -H "Content-Type: application/json" -d \'{json.dumps(defectdojo_payload)}\''
                    os.system(curl_command)

              if __name__ == "__main__":
                  project_key = "circlecicd1_circlecicd0123"
                  token = os.environ.get("SONAR_TOKEN")
                  defectdojo_api_url = os.environ.get("DEFECTDOJO_API_URL")
                  defectdojo_api_key = os.environ.get("DEFECTDOJO_API_KEY")
                  send_sonarcloud_to_defectdojo(project_key, token, defectdojo_api_url, defectdojo_api_key)
            EOF

workflows:
  version: 2
  deploy_workflow:
    jobs:
      - install_dependencies
      - sonarCloud_analysis:
          requires:
            - install_dependencies