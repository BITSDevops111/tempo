version: 2.1

jobs:
  sonarCloud_analysis:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: Install NPM dependencies
          command: npm install
      - run:
          name: Install jq
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
      - run:
          name: Install SonarScanner CLI
          command: |
            export SONAR_SCANNER_VERSION=6.2.1.4610
            export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
            curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
            unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
            export PATH=$SONAR_SCANNER_HOME/bin:$PATH
      - run:
          name: Verify installations
          command: |
            sonar-scanner --version
            which sonar-scanner
            jq --version
            which jq
      - run:
          name: Install & Run SonarScanner Analysis
          command: |
            export SONAR_SCANNER_OPTS="-server"
            sonar-scanner -Dsonar.organization=circlecicd1 -Dsonar.projectKey=circlecicd1_circlecicd0123 -Dsonar.sources=. -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
      - run:
          name: Check SonarCloud Quality Gate
          command: |
            #!/bin/bash -eo pipefail
            curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=circlecicd1_circlecicd0123" > quality_gate.json
            quality_gate_status=$(jq -r '.projectStatus.status' quality_gate.json)
            if [ "$quality_gate_status" == "ERROR" ]; then
              echo "SonarCloud Quality Gate failed."
              exit 1
            else
              echo "SonarCloud Quality Gate passed."
            fi
      - run:
          name: Send SonarCloud results to DefectDojo
          command: |
            sonar_host_url="${SONAR_HOST_URL}"
            project_key="circlecicd1_circlecicd0123"
            token="${SONAR_TOKEN}"
            defectdojo_api_url="${DEFECTDOJO_API_URL}"
            defectdojo_api_key="${DEFECTDOJO_API_KEY}"

            sonar_issues=$(curl -s -u "${token}:" "${sonar_host_url}/api/issues/search?componentKeys=${project_key}&resolved=false")

            defectdojo_payload=$(echo "$sonar_issues" | jq -c '.issues[] | {title: "SonarCloud: " + .message, description: .message, severity: (.severity | ascii_upcase), file_path: .component, line_number: .line, scanner: "SonarCloud", active: true, verified: false, false_p: false, duplicate: false, out_of_scope: false, cwe: [], tags: [], date: .creationDate}')

            if [[ -n "$defectdojo_payload" ]]; then
              curl -X POST "${defectdojo_api_url}/api/v2/findings/" -H "Authorization: Token ${defectdojo_api_key}" -H "Content-Type: application/json" -d "[$defectdojo_payload]"
            fi

workflows:
  version: 2
  deploy_workflow:
    jobs:
      - sonarCloud_analysis